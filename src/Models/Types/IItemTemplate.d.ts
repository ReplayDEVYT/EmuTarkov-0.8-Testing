export interface IItemTemplate {
	_defAmmoTemplate?: AmmoTemplate;
	Accuracy?: number;
	AimPlane?: number;
	ammoCaliber?: string;
	BackgroundColor?: TaxonomyColor;
	bEffDist?: number;
	bFirerate?: number;
	bHearDist?: number;
	CameraRecoil?: number;
	CenterOfImpact?: number;
	Chambers?: Slot[];
	CompactHandling?: boolean;
	ConflictingItems?: string[];
	Convergence?: number;
	CreditsPrice?: number;
	defAmmo?: string;
	defMagType?: string;
	Description?: string;
	DeviationCurve?: number;
	DeviationMax?: number;
	Durability?: number;
	durabSpawnMax?: number;
	durabSpawnMin?: number;
	EffectiveDistance?: number;
	Ergonomics?: number;
	ExaminedByDefault?: boolean;
	ExamineExperience?: number;
	ExamineTime?: number;
	ExtraSizeDown?: number;
	ExtraSizeForceAdd?: boolean;
	ExtraSizeLeft?: number;
	ExtraSizeRight?: number;
	ExtraSizeUp?: number;
	Foldable?: boolean;
	FoldedSlot?: string;
	HasShoulderContact?: boolean;
	Height?: number;
	HideEntrails?: boolean;
	IsAnimated?: boolean;
	isBoltCatch?: boolean;
	isChamberLoad?: boolean;
	isFastReload?: boolean;
	ItemSound?: string;
	LootExperience?: number;
	Loudness?: number;
	MaxDurability?: number;
	MergesWithChildren?: boolean;
	MustBoltBeOpennedForReload?: boolean;
	Name?: string;
	NotShownInSlot?: boolean;
	OperatingResource?: number;
	Prefab?: ResourceKey;
	QuestItem?: boolean;
	RaidModdable?: boolean;
	Rarity?: ELootRarity;
	Recoil?: number;
	RecoilAngle?: number;
	RecoilCenter?: Vector3;
	RecoilForceBack?: number;
	RecoilForceUp?: number;
	RecolDispersion?: number;
	ReloadMode?: Weapon.EReloadMode;
	RepairComplexity?: number;
	RepairCost?: number;
	RepairSpeed?: number;
	Retractable?: boolean;
	RotationCenter?: Vector3;
	RotationCenterNoStock?: Vector3;
	ShortName?: string;
	ShotgunDispersion?: number;
	SightingRange?: number;
	SizeReduceRight?: number;
	SpawnChance?: number;
	StackMaxSize?: number;
	StackObjectsCount?: number;
	TacticalReloadFixation?: number;
	TacticalReloadStiffnes?: Vector3;
	ToolModdable?: boolean;
	UsePrefab?: ResourceKey;
	Velocity?: number;
	weapAmmoTypes?: object[];
	weapClass?: string;
	weapFireType?: Weapon.EFireMode[];
	weapUseType?: string;
	Weight?: number;
	Width?: number;
}